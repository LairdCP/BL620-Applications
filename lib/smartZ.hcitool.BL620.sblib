//******************************************************************************
// Laird Technologies (c) 2014
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// This library file provides hcitool commands to be used by smartZ and should be
// #included into the file 'smartZ.sb' if running on a dual mode module
// e.g. BT900.
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//		hcitool dev 		Display local devices
//		hcitool con 		Display active connections
//		hcitool leadv		Start LE advertisement
//		hcitool noleadv		Stop LE advertisement
//		hcitool lescan      Start LE scan
//		hcitool lecc        Create a LE Connection
//		hcitool ledc        Disconnect a LE Connection
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
// Display the hcitool help menu
//==============================================================================
sub _hciHelp()

	print "Usage:\n"
	print "	hcitool <command> [command parameters]\n\n"
	print "Commands:\n"
	print "	dev 		Display local devices\n"
	print "	con 		Display active connection handles\n"
	print "	leadv		Start LE advertisement\n"
	print "	noleadv 	Stop LE advertisement\n"
	print "	lescan      Start LE scan\n"
	print "	lecc        Create a LE Connection\n"
	print "	ledc        Disconnect a LE Connection\n"
	print "\n"
	print "For more information on the usage of each command use:\n"
	print "	hcitool <command> --help\n\n"

endsub

//==============================================================================
//	hcitool dev
//==============================================================================
function _hciDev()

	dim addr$

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			//Display the hcitool dev help menu
			print "Usage:\n"
			print "		hcitool dev\n"
			exitfunc 1
		endif
	endwhile
'--------------------------------------'

	// Get Bluetooth address of local device
	addr$ = SYSINFO$(4)
	addr$ = right$(addr$, 6)
	// Display the local device name + Bluetooth address
	print "Device: \n	";name$;"    ";StrHexize$(addr$);"\n"
	
endfunc 1

//==============================================================================
//	hcitool con
//==============================================================================
function _hciCon()

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// Display the hcitool con help menu
			print "Usage:\n"
			print "		hcitool con\n"
			exitfunc 1
		endif
	endwhile
'--------------------------------------'

	dim conAddr$, z

	// Loop through the acquired connection handles and display connected devices
	print "Connections:\n"
	for z=1 to conns
		rc = BleGetAddrFromConnHandle(hc[z],conAddr$)
		print "	> ";strhexize$(conAddr$);" handle ";hc[z];"\n"
	next

endfunc 1

//==============================================================================
//	hcitool leadv	[--timeout]
//==============================================================================
function _hciLeAdv()

	// Set default time-out of LE adverts to be infinite
	dim timOut	: timOut = 0

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		// Display the hcitool leadv help menu
			print "Usage:\n"
			print "		hcitool leadv [--timeout=t] advert time-out in seconds\n"
			print ""
			exitfunc 1

		elseif strcmp(tkn$,"timeout")==0 then
		// modify the timeout variable
			strshiftleft(urtcmd$, 1)					// discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			// take the next string from the command
			rc = extractInttoken(tkn$,timOut)			// extract the integer value of the string

		endif
	endwhile
'--------------------------------------'					

	dim a$
	// change timeout value from seconds to milliseconds
	timOut = timOut * 1000
	rc = BleAdvertStart(0,a$,25,timOut,0)
	AssertResCode(rc)

endfunc 1

//==============================================================================
//	hcitool noleadv
//==============================================================================
function _hciNoLeAdv()

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		// Display the hcitool noleadv help menu
			print "Usage:\n"
			print "		hcitool noleadv\n"
			print ""
			exitfunc 1

		endif
	endwhile
'--------------------------------------'					

	rc = BleAdvertStop()
	AssertResCode(rc)

endfunc 1

//==============================================================================
//	hcitool lescan [--length]
//==============================================================================
function _hciLeScan()

	// Set default scan time to 5 seconds
	dim scnLen : scnLen = 5000

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
		// Display the hcitool lescan help menu
			print "Usage:\n"
			print "		hcitool lescan [--length=N] maximum scan duration in seconds\n"
			print ""
			exitfunc 1

		elseif strcmp(tkn$,"length")==0 then
			strshiftleft(urtcmd$, 1)					// discard the = sign
			rc = extractStrToken(urtcmd$, tkn$)			// take the next string from the command
			rc = extractInttoken(tkn$,scnLen)			// extract the integer value of the string
			scnLen = scnLen*1000

		endif
	endwhile
'--------------------------------------'

	rc = BleScanStart(scnLen, 0)
	AssertResCode(rc)
	if rc == 0 then 
		print "LE Scan ...\n"
	endif

endfunc 1

//==============================================================================
//	hcitool lecc <bdaddr>
//==============================================================================
function _hciLeCc() as integer

	addr$=""

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// Display the hcitool lecc help menu
			print "Usage:\n"
			print "		hcitool lecc <bdaddr>\n"
			exitfunc 1

		else
			addr$ = strdehexize$(tkn$)

		endif
	endwhile
'--------------------------------------'

	rc = BleConnect(addr$, 5000, 20000, 75000, 5000000)						// ConnectionTimeoutms, minConIntervalus, maxConIntervalus, nSupervisionTimeoutus
	AssertResCode(rc)
	if rc == 0 then
		print "Connecting ... \n"
	endif

endfunc 1

//==============================================================================
//	hcitool ledc <handle>
//==============================================================================
function _hciLeDc() as integer

	dim conHdl

'--- Extract all strings in command ---'
'--------------------------------------'
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// Display the hcitool ledc help menu
			print "Usage:\n"
			print "		hcitool ledc <handle>\n"

			exitfunc 1

		else
			conHdl = StrValDec(tkn$)

		endif
	endwhile
'--------------------------------------'

	// Disconnect from LE device
	rc = bledisconnect(conHdl)
	AssertResCode(rc)
	if rc == 0 then 
		print "Disconnecting ...\n"
	endif	

endfunc 1

//==============================================================================
//	Extract the hcitool command
//==============================================================================
sub _hci()

	// Extract and process hcitool subcommand
	
	while ExtractStrToken(urtcmd$, tkn$)!=0
		if strcmp(tkn$,"help")==0 then
			// Display the hcitool command help menu
			_hciHelp()
			break

		elseif strcmp(tkn$,"dev")==0 then
			// Display the address of the local device
			rc = _hciDev()																				

		elseif strcmp(tkn$,"con")==0 then
			// Display active connection handles
			command = SMARTZ_COMMAND_HCITOOL_CON
			rc = _hciCon()							

		elseif strcmp(tkn$, "leadv")== 0 then
			// LE advertise
			rc = _hciLeAdv()

		elseif strcmp(tkn$, "noleadv")== 0 then
			// Stop LE adverts
			rc = _hciNoLeAdv()

		elseif strcmp(tkn$, "lescan")==0 then
			// Start LE scan
			rc = _hciLeScan()

		elseif strcmp(tkn$, "lecc")==0 then
			// Create a LE connection
			rc = _hciLeCc()

		elseif strcmp(tkn$, "ledc")==0 then
			// Disconnect a LE Connection
			rc = _hciLeDc()

		endif
	endwhile

endsub

//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when there is an advert report waiting to be read 
//==============================================================================
function HandlerAdvRpt() as integer

	dim ad$,dta$,ndisc,rsi,tag, nm$
	rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
	while rc==0
		ad$ = right$(ad$,8)
		print "\n		";strhexize$(ad$)
		tag = 0x09
		rc = BLEGETADBYTAG(dta$, tag, nm$)
		if rc == 0x6060 then
			tag = 0x08
			rc = BLEGETADBYTAG(dta$, tag, nm$)
		endif

		if rc == 0 then
			print "  ";nm$
		endif
		rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
	endwhile

endfunc 1

//==============================================================================
// This handler is called when there is a BLE connection timeout
//==============================================================================
function HandlerBleConnTimOut() as integer

	print "\nCould not create connection: Connection timed out\n";pr$

endfunc 1

//==============================================================================
// This handler is called when there is a BLE scan timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer 

	rc = BleScanStop()
	AssertResCode(rc)
	print "\n";pr$

endfunc 1

//==============================================================================
// This handler is called when there is a BLE message (connection or disconnection)
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer

	dim hz

	select nMsgId

	case BLE_EVBLEMSGID_CONNECT
		hz = nCtx
		// Add connection handle to list of connection handles
		rc = AcqConnHandle(hz)
		conns = conns + 1
		print "\nConnection handle ";hz;"\n";pr$

	case BLE_EVBLEMSGID_DISCONNECT
		// Release connection handle from list of connection handles
		hz = nCtx
		rc = RelConnHandle(hz)
		conns = conns - 1
		print "\nDisconnected\n";pr$

	case else
		//Unknown Ble Msg

  endselect

endfunc 1

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------

// hcitool related events (BLE)
OnEvent EVBLE_ADV_REPORT			call HandlerAdvRpt
OnEvent EVBLE_SCAN_TIMEOUT       	call HandlerBlrScanTimOut
OnEvent	EVBLE_CONN_TIMEOUT			call HandlerBleConnTimOut
OnEvent EVBLEMSG                 	call HandlerBleMsg
