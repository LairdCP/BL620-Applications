//******************************************************************************
// Laird Technologies (c) 2014
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// This library file provides commands to control BT Classic operation and should be
// #included into the file 'cmd.ble.manager.sb' if running on a dual mode module
// e.g. BT900.
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Convention : (1) Case sensitive, and commands are presented in alphabetic order
//              (2) If line ends with \ then it continues on next line. That does
//                  not mean that it should be sent as multiple lines
//              (3) Replace anything between ## 
//              (4) #INTaaaa# means a number in decimal, hex, octal or binary
//                      format -> 23 == 0x17 == h'17 == o'23 == b'10111
//                      aaaa is just a description
//              (5) #HEXaaaa# means a string without delimitors consisting of hex 
//                      characters only aaaa is just a description
//              (6) #STRaaaa# means a string without delimitors
//                      aaaa is just a description
//              (7) "STRaaaa" means a string which must have the " delimitor
//                      aaaa is just a description
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// -----------------------------------------------------------------------------
// bridge spp
//   - Bridge to the most recent SPP connection. All data arriving via UART will
//     be sent over this connection.
//        
// -----------------------------------------------------------------------------
// inquiry config #INTcfgID# #INTvalue#
//    --- bluetooth classic functionality ---
//   - set scanning configuration parameters
//     #INTcfgID# 
//       0    Inquiry Type (0 for General Inquiry, 1 for Limited Inquiry)
//       1    Inquiry Mode (0 for Standard, 1 for with RSSI, 2 for Extended)
//       2    Max number of devices to receive inquiry responses from (0-255)
//       3    Inquiry Tx Power (Range is from -70 to 20 dBm)
//
// -----------------------------------------------------------------------------
// inquiry start #INTinqTimeoutS#
//    --- bluetooth classic functionality ---
//   - Start an inquiry using the timeout #INTinqTimeoutS#
//
// -----------------------------------------------------------------------------
// inquiry cancel
//    --- bluetooth classic functionality ---
//   - Cancel an ongoing inquiry
//
// -----------------------------------------------------------------------------
// spp open 
//    --- bluetooth classic functionality ---
//   - Open the serial port service and listen for SPP connections. Service handle is returned
//
// -----------------------------------------------------------------------------
// spp connect #HEXaddr6Bytes#
//    --- bluetooth classic functionality ---
//   - Connect to an SPP device defined by mac address #HEXaddr6Bytes#. Handle is returned
//
// -----------------------------------------------------------------------------
// spp disconnect #INThConnSpp#
//    --- bluetooth classic functionality ---
//   - Disconnect from an SPP device on the other end of connection with handle #INThConnSpp#
//
// -----------------------------------------------------------------------------
// spp close #INThSpp# 
//    --- bluetooth classic functionality ---
//   - Close the Serial Port with handle #INThSpp# being expedited by SPP Service.
//
// -----------------------------------------------------------------------------
// spp write #INThConnSpp# #STRdata#
//    --- bluetooth classic functionality ---
//   - Transmit data #STRdata# via the SPP connection identified by #INThConnSpp#
//
// -----------------------------------------------------------------------------
// btc getfriendlyname
//    --- bluetooth classic functionality ---
//    - calls BtcGetFriendlyName$() and prints the returned name
//
// -----------------------------------------------------------------------------
// btc setfriendlyname #STRname#
//    --- bluetooth classic functionality ---
//    - calls BtcSetFriendlyName$() with the name #STRname#
//
// -----------------------------------------------------------------------------
// btc discoveryconfig #INTcfgID# #INTval# 
//    --- bluetooth classic functionality ---
//    - configre discoverability parameters 
//
//     #INTcfgID# 
//       0    Discoverability Type (0 for General, 1 for Limited)
//       1    Inquiry Scan Interval 
//              Units: baseband slots (0.625 msec)
//              Range: 11.25 msec (0x0012) to 2560 msec (0x1000)
//              Default: 640ms (0x0400)
//       2    Inquiry Scan Window 
//              Units: baseband slots (0.625 msec)
//              Range: 11.25 msec (0x0012) to 2560 msec (0x1000)
//              Default: 320ms (0x0200)
//
// -----------------------------------------------------------------------------
// btc setdiscoverable #INTenable# #INTtimeout#
//    --- bluetooth classic functionality ---
//    - Set the module discoverable for time #INTtimeout# in seconds or not discoverable
//
//    #INTenable# 
//      0 = Not Discoverable
//      1 = Discoverable
//
// -----------------------------------------------------------------------------
// btc setconnectable #INTenable#
//    --- bluetooth classic functionality ---
//    - Enable or disable connectivity
//
//    #INTenable# 
//      0 = Not Connectable
//      1 = Connectable
//
// -----------------------------------------------------------------------------
// btc setpairable #INTenable#
//    --- bluetooth classic functionality ---
//    - Enable or disable pairability
//
//    #INTenable# 
//      0 = Not Pairable
//      1 = Pairable
//
// -----------------------------------------------------------------------------
// btc bond stats
//    --- bluetooth classic functionality ---
//    - Get the classic BT bonding manager database statistics.
//
// -----------------------------------------------------------------------------
// btc bond addkey #HEXaddr6Bytes# #HEXkey32Bytes# #INTkeyType#
//    --- bluetooth classic functionality ---
//    - Add a link key to the rolling database
//
// -----------------------------------------------------------------------------
// btc bond getkey #HEXaddr6Bytes#
//    --- bluetooth classic functionality ---
//    - Get a link key from the database for the BT address specified
//
// -----------------------------------------------------------------------------
// btc bond delkey #HEXaddr6Bytes#
//    --- bluetooth classic functionality ---
//    - Erase a link key from the database for the BT address specified.
//
// -----------------------------------------------------------------------------
// btc bond delall
//    --- bluetooth classic functionality ---
//    - Erase all link keys in the database (rolling and persistent)
//
// -----------------------------------------------------------------------------
// btc bond persistkey #HEXaddr6Bytes#
//    --- bluetooth classic functionality ---
//    - Make a link key persistent by transferring it from the rolling database 
//      to the persistent database
//
// -----------------------------------------------------------------------------
// btc bond getfirst
//    --- bluetooth classic functionality ---
//    - Get the first link key in the database
//
// -----------------------------------------------------------------------------
// btc bond getnext
//    --- bluetooth classic functionality ---
//    - Get the next link key in the database
//
// -----------------------------------------------------------------------------
// btc savepairings #INTflag#
//    --- bluetooth classic functionality ---
//    - Set whether to save pairing information (Bond) for subsequent incoming
//      pair requests
//
//    - #INTflag# - 0 : Do not store pairing information (Don’t bond)
//                  1 : Store pairing information (Bond)
//
// -----------------------------------------------------------------------------
// btc pair #HEXaddr6Bytes# #INTflag#
//    --- bluetooth classic functionality ---
//    - Pair with device with address #HEXaddr6Bytes# and specify whether to bond
//      with #INTflag# - 0 : Do not store pairing information (Don’t bond)
//                       1 : Store pairing information (Bond)
//                       2 : Use default as specified by 'btc savepairings'
//
// -----------------------------------------------------------------------------
// btc pairresp #INTpairResp#
//    --- bluetooth classic functionality ---
//    - Answer the pairing request
//      with #INTpairResp# - 0 : Decline pair request
//                           1 : Accept pair request
//
// -----------------------------------------------------------------------------
// btc sendpin #INTpin# 
//    --- bluetooth classic functionality ---
//    - Respond to a PIN request with #INTpin# during a pairing procedure
//
// -----------------------------------------------------------------------------
// misc i  clearall
//    - make all elements of the entire i[] array equal to 0
//
// -----------------------------------------------------------------------------
// misc i  set #INTidx# #INTval#
//    - i[#INTidx#] = #INTval#
//    - #INTidx# will be checked for valid index 
//
// -----------------------------------------------------------------------------
// misc s$ clearall
//    - make all elements of the entire s$[] array empty
//
// -----------------------------------------------------------------------------
// misc s$ set #INTidx# #STRescapedvalue#
//    - s$[#INTidx#] = #STRescapedvalue#
//    - #INTidx# will be checked for valid index 
//
// -----------------------------------------------------------------------------
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************
        // Number of spp ports
#define NUM_OF_SPP_PORTS                     8

//******************************************************************************
// Definitions
//******************************************************************************
'//Temporary workaround until BlePair is implemented for BL620
#define BLE_PAIR    BlePair(hc[i[1]], i[2])



//******************************************************************************
// Global Variable Declarations
//******************************************************************************
dim hcSpp                   //handle of connection to use for VSP service
dim hP[NUM_OF_SPP_PORTS+1]  //contains spp port handles
dim prAddr$              //BT address of last device pairing requested from or initiated with



//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
//==============================================================================
function AcqPortHandle()
  dim z
  for z=1 to (NUM_OF_SPP_PORTS)
    if hP[z] == -1 then
      exitfunc z
    endif
  next
endfunc 0

//==============================================================================
//==============================================================================
sub RelPortHandle(hPort)
  dim z
  for z=1 to (NUM_OF_SPP_PORTS)
    if hP[z] == hPort then 
      hP[z]=-1
      exitsub
    endif
  next
endsub

//-------------------------------------------------------------------------
//print the link data data
//-------------------------------------------------------------------------
sub PrintLinkKey()     
  print "\n Addr=";StrHexize$(s$[1]);" key=";StrHexize$(s$[2]);" keytype=";i[1]
  if i[2]==0 then
    print " PERSIST"
  else
    print " ROLLING"
  endif
endsub



//-------------------------------------------------------------------------
//#CMD#//  inquiry config #INTcfgID# #INTvalue#
//#CMD#//  inquiry start #INTinqTimeoutS#
//#CMD#//  inquiry cancel
//-------------------------------------------------------------------------
function _inquiry()  
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
        exitfunc 5
    endif
    
    if strcmp(tkn$,"cancel")==0 then
        //cancel the inquiry
        exitfunc BtcInquiryCancel()
    endif
    
    if strcmp(tkn$,"config")==0 then
        //extract 2 : (cfgID value) and store starting at i[1]
        rc = ExtractIntTokens(urtcmd$,1,2)
        if rc != 0 then
            exitfunc rc
        endif
        exitfunc BtcInquiryConfig(i[1],i[2])  
    endif
    if strcmp(tkn$,"start")==0 then
        //extract 1 : (inqTimeoutS) and store starting at i[1]
        rc = ExtractIntTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        exitfunc BtcInquiryStart(i[1])
    endif
endfunc 5


//-------------------------------------------------------------------------
//#CMD#//  spp open 
//#CMD#//  spp connect #HEXaddr6Bytes#
//#CMD#//  spp disconnect #INThConnSpp#
//#CMD#//  spp close #INThSpp# 
//#CMD#//  spp write #INThConnSpp# #STRdata#
//-------------------------------------------------------------------------
function _spp()  
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
        exitfunc 5
    endif
    
    if strcmp(tkn$,"open")==0 then       
        dim ind : ind = AcqPortHandle()     //Get the next free index in the array of SPP port handles
        rc=BtcSppOpen(hP(ind))              //open the spp port. Store handle in the array at acquired index
        if rc==0 then
            print "\nSPP Port open. Handle = "; hP(ind)
            exitfunc 0
        else
            exitfunc rc
        endif
    
    elseif strcmp(tkn$,"connect")==0 then
        //extract 2 : (cfgID value) and store starting at i[1]
        rc = ExtractStrTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        s$[1] = StrDeHexize$(s$[1])
        exitfunc BtcSppConnect(s$[1])  
   
    elseif strcmp(tkn$,"disconnect")==0 then
        //extract 1 : (hConnSpp) and store starting at i[1]
        rc = ExtractIntTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        exitfunc BtcSppDisconnect(hP[i[1]])
    
    elseif strcmp(tkn$,"close")==0 then       
        rc = ExtractIntTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        
        rc=BtcSppClose(hP[i[1]])              //open the spp port. Store handle in the array at acquired index
        if rc==0 then
            print "\nSPP Port closed. Handle = "; i[1]
            RelPortHandle(hP[i[1]])           //release the port with the given handle
            exitfunc 0
        else
            exitfunc rc
        endif
        
    elseif strcmp(tkn$,"write")==0 then
        dim wLen
        rc = ExtractIntTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        
        StrShiftLeft(urtcmd$,1)
        
        // rc = ExtractStrTokens(urtcmd$,1,1)
        // if rc != 0 then
            // exitfunc rc
        // endif
        
        exitfunc BtcSppWrite(hP[i[1]], urtcmd$, wLen)
    endif
endfunc 5


//-------------------------------------------------------------------------
//#CMD#//  btc bond stats
//#CMD#//  btc bond addkey #HEXaddr6Bytes# #HEXkey32Bytes# #INTkeyType#
//#CMD#//  btc bond getkey #HEXaddr6Bytes#
//#CMD#//  btc bond delkey #HEXaddr6Bytes#
//#CMD#//  btc bond delall
//#CMD#//  btc bond getfirst
//#CMD#//  btc bond getnext
//#CMD#//  btc bond persistkey #HEXaddr6Bytes#
//-------------------------------------------------------------------------
function _btcbond()  
  tlen = ExtractStrToken(urtcmd$,tkn$)
  if tlen > 0 then
    //=================================================
    if strcmp(tkn$,"stats")==0 then
      i[0]=BtcBondingStats(i[1],i[2])
      print "\n Capacity=";i[0];" Rolling=";i[1];" Persistent=";i[2];"\r"
      exitfunc 0
    endif
    //=================================================
    if strcmp(tkn$,"addkey")==0 then
      //#HEXaddr6Bytes#
      tlen = ExtractStrToken(urtcmd$,tkn$)
      if tlen > 0 then
        s$[1]=StrDehexize$(tkn$)
        if strlen(s$[1]) != 6 then
          exitfunc 5
        endif
      endif
      //#HEXkey32Bytes#
      tlen = ExtractStrToken(urtcmd$,tkn$)
      if tlen > 0 then
        s$[2]=StrDehexize$(tkn$)
        if strlen(s$[2]) != 16 then
          exitfunc 5
        endif
      endif
      //extract 1 : (#INTkeyType#) and store starting at i[1]
      rc = ExtractIntTokens(urtcmd$,1,1)
      if rc != 0 then
        exitfunc rc
      endif        
      exitfunc BtcBondingAddKey(s$[1],s$[2],i[1])
    endif
    //=================================================
    if strcmp(tkn$,"getkey")==0 then
      //#HEXaddr6Bytes#
      tlen = ExtractStrToken(urtcmd$,tkn$)
      if tlen > 0 then
        s$[1]=StrDehexize$(tkn$)
        if strlen(s$[1]) != 6 then
          exitfunc 5
        endif
      endif
      rc = BtcBondingGetKey(s$[1],s$[2],i[1],i[2])
      if rc!=0 then
        exitfunc rc
      endif
      //print the link data data
      PrintLinkKey()
      exitfunc 0
    endif
    //=================================================
    if strcmp(tkn$,"delkey")==0 then
      //#HEXaddr6Bytes#
      tlen = ExtractStrToken(urtcmd$,tkn$)
      if tlen > 0 then
        s$[1]=StrDehexize$(tkn$)
        if strlen(s$[1]) != 6 then
          exitfunc 5
        endif
      endif
      exitfunc BtcBondingEraseKey(s$[1])
    endif
    //=================================================
    if strcmp(tkn$,"delall")==0 then
      exitfunc BtcBondingEraseAll()
    endif
    //=================================================
    if strcmp(tkn$,"getfirst")==0 then
      rc = BtcBondingGetFirst(s$[1],s$[2],i[1],i[2])
      if rc!=0 then
        exitfunc rc
      endif
      //print the data
      PrintLinkKey()
      exitfunc 0
    endif
    //=================================================
    if strcmp(tkn$,"getnext")==0 then
      rc = BtcBondingGetNext(s$[1],s$[2],i[1],i[2])
      if rc!=0 then
        exitfunc rc
      endif
      //print the data
      PrintLinkKey()
      exitfunc 0
    endif
    //=================================================
    if strcmp(tkn$,"persistkey")==0 then
      //#HEXaddr6Bytes#
      tlen = ExtractStrToken(urtcmd$,tkn$)
      if tlen > 0 then
        s$[1]=StrDehexize$(tkn$)
        if strlen(s$[1]) != 6 then
          exitfunc 5
        endif
      endif
      exitfunc BtcBondingPersistKey(s$[1])
    endif
  endif
endfunc 5


//-------------------------------------------------------------------------
//#CMD#//  btc getfriendlyname
//#CMD#//  btc setfriendlyname #STRname#
//#CMD#//  btc sendpin #INTpin#
//#CMD#//  btc savepairings #INTflag#
//#CMD#//  btc pair #HEXaddr6Bytes# #INTflag#
//#CMD#//  btc pairresp #INTpairResp#
//#CMD#//  btc discoveryconfig #INTcfgID# #INTval#
//#CMD#//  btc setdiscoverable #INTenable# #INTtimeout#
//#CMD#//  btc setpairable #INTenable#
//#CMD#//  btc setconnectable #INTenable#
//-------------------------------------------------------------------------
function _btc() 
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
        exitfunc 5
    endif
      
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
    if strcmp(tkn$,"getfriendlyname")==0 then       
        dim nme$
        rc=BtcGetFriendlyName(nme$)
        if rc== 0 then
            print "\n";nme$
            exitfunc 0
        else
            exitfunc rc
        endif
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    
    if strcmp(tkn$,"setfriendlyname")==0 then       
        rc = ExtractStrTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        
        exitfunc BtcSetFriendlyName(s$[1])
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"sendpin")==0 then
        rc = ExtractStrTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        
        exitfunc BtcSendPINResp(s$[1])
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"bond")==0 then
        exitfunc _btcbond()
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    
    if strcmp(tkn$,"savepairings")==0 then
        rc = ExtractIntTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        
        exitfunc BtcSavePairings(i[1])
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"pair")==0 then
        rc = ExtractStrTokens(urtcmd$,1,2)
        if rc != 0 then
            exitfunc rc
        endif
        
        s$[1] = StrDehexize$(s$[1])
        exitfunc BtcPair(s$[1], StrValDec(s$[2]))
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"pairresp")==0 then
        rc = ExtractIntTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        
        exitfunc BtcSendPAIRResp(i[1])
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"discoveryconfig")==0 then
        //extract 2 : (#INTcfgID# #INTval#) and store starting at i[1]
        rc = ExtractIntTokens(urtcmd$,1,2)
        if rc != 0 then
            exitfunc rc
        endif
        
        exitfunc BtcDiscoveryConfig(i[1], i[2])
    endif
        
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"setdiscoverable")==0 then
        //extract 2 : (#INTenable# #INTtimeout#) and store starting at i[1]
        rc = ExtractIntTokens(urtcmd$,1,2)
        if rc != 0 then
            exitfunc rc
        endif
        
        exitfunc BtcSetDiscoverable(i[1], i[2])
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"setpairable")==0 then
        //extract 1 : (#INTenable#) and store starting at i[1]
        rc = ExtractIntTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        
        exitfunc BtcSetPairable(i[1])
    endif
    
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"setconnectable")==0 then
        //extract 1 : (#INTenable#) and store starting at i[1]
        rc = ExtractIntTokens(urtcmd$,1,1)
        if rc != 0 then
            exitfunc rc
        endif
        
        exitfunc BtcSetConnectable(i[1])
    endif
    
endfunc 5






'//******************************************************************************
'// Handler definitions
'//******************************************************************************
//==============================================================================
// This handler is called when there is an inquiry report waiting to be read
//==============================================================================
function HandlerInqResp(respType) as integer
    dim ad$,dta$,ndx,rsi,tag
    rc = BtcInquiryGetReport(ad$,dta$,ndx,rsi)
        print "\nMAC: "; StrHexize$(ad$)
      
        if respType > 0 then
            print " ";rsi
            
            if respType == 2 then
                print "\n  EIR: "; StrHexize$(dta$)
                dim tg$
                while BtcGetEIRbyIndex(ndx,dta$,tag,ad$)==0
                    //write tag value as hex to string tg$
                    sprint #tg$,integer.h'tag
                    
                    //hexize eir tag data if not a shortened or complete local name
                    if tag < 0x08 || tag > 0x09 then
                        
                        ad$ = StrHexize$(ad$)
                    else
                        StrDeescape(ad$)
                    endif
                    
                    //print the last 2 hex digits of the tag, and the data
                    if strlen(ad$)!=0 then
                        print "\n  - Tag 0x" + RIGHT$(tg$,2) +": "; ad$
                    endif
                                           
                    ndx=ndx+1
                endwhile
                print "\n"
            endif
        endif
    // endif
endfunc 1


//==============================================================================
// This handler is called when there is an inquiry timeout
//==============================================================================
function HandlerBtcInqTimOut() as integer
    UartRsp(0)
endfunc 1


//==============================================================================
// This handler is called when there is an discoverability timeout
//==============================================================================
function HandlerBtcDiscTimOut() as integer
    print "\n --- No longer discoverable"
    UartRsp(0)
endfunc 1


//==============================================================================
// Called after an SPP connection attempt
//==============================================================================
function HandlerSppCon(hConn, res) as integer
    dim hz

    print "\n --- SPP Connect: (";integer.h' res;")"
    //if connected successfully
    if res == 0 then
        //try and acquire a connection handle
        hz = AcqConnHandle(hConn)
        
        //disconnect if failed
        if hz==0 then
            rc=BtcSppDisconnect(hConn)
            print " DROPPED"
        else
            hcSpp = hc[hz]     //always assume most recent connection for SPP
            conns = conns + 1
            print " handle = ";hz;pr$
        endif
    endif        
endfunc 1


//==============================================================================
// Called when a connection attempt to an SPP device times out
//==============================================================================
function HandlerSppConnTimOut() as integer
    DbgMsg( "\n --- SPP Conn Attempt Timeout" )
endfunc 1


//==============================================================================
// Called when an SPP disconnection occurs
//==============================================================================
function HandlerSppDiscon(hConn)
    dim hz
    
    hz = RelConnHandle(hConn)
    conns = conns - 1
    print "\n --- Spp Disconnect: handle=";hz
endfunc 1


//==============================================================================
// Called when data is received via UART when bridged to SPP
//==============================================================================
function HandlerUartRxSpp()
    dim uLen, u$, nLen, nLen2 : uLen = 1
    WHILE uLen != 0
        //read data that has arrived through via the UART
        uLen = UartRead(u$) 
    
        if uLen > 0 then
            if StrCmp(u$,"^")==0 then
                // print "\nBefore: ";carCnt                 
                if TimerRunning(0)==0 then
                    carCnt = carCnt + 1
                    if carCnt<3 then
                        TimerStart(0,CAR_PRESS_DELAY,0) 
                    else
                        rc=SendMsgApp(0,CMD_MODE)    //* Using this for switching between bridge and cmd mode
                    endif
                else    //invalid press                    
                    TimerCancel(0)
                    carCnt = 0
                endif
            else
                //write data to most recent spp connection
                nLen2 = 0
                WHILE nLen2 != uLen
                    rc = BtcSPPWrite(hcSpp, u$, nLen)
                    IF rc != 0 THEN
                        //Assume problem with the SPP connection
                        exitfunc rc
                    ENDIF
                    STRSHIFTLEFT(u$, nLen)
                    nLen2 = nLen2 + nLen
                ENDWHILE
            endif
        endif
    ENDWHILE
endfunc 1


//==============================================================================
// Called when data is received via SPP - CMD mode
//==============================================================================
function HandlerSppDataCmd()
    dim hPort, data$, rLen
    
    '//read and print data while there is data available to read
    while BtcSppRead(hPort, data$, rLen) == 0    
        if rLen>0 then
            print"\nPort Handle: ";hPort; " Length: ";rLen;"\nData: ";data$;pr$
        endif
    endwhile
endfunc 1


//==============================================================================
// Called when data is received via SPP - BRIDGE mode
//==============================================================================
function HandlerSppData()
    dim hPort, data$, rLen
    
    '//read and print data while there is data available to read
    while BtcSppRead(hPort, data$, rLen) == 0    
        if rLen>0 then
            print data$
        endif
    endwhile
endfunc 1


//==============================================================================
// Called when there is a pairing request from another device
//==============================================================================
function HandlerPairReq()
    dim s$
    rc=BtcGetPAIRRequestBDAddr(s$)
    prAddr$ = s$
    print "\nPair Req: "; StrHexize$(s$);pr$
endfunc 1


//==============================================================================
// Called on a pin request from another device
//==============================================================================
function HandlerPINReq() 
    dim mac$
    rc=BtcGetPinRequestBDAddr(mac$)
    if rc==0 then
        print "\nPIN Req: "; StrHexize$(mac$);pr$
    else
        AssertResCode(rc,2273)
    endif
endfunc 1


//==============================================================================
// Called after a pairing attempt
//==============================================================================
function HandlerPairRes(res)
    print "\nPair Result: ";res; " "; StrHexize$(prAddr$);pr$
endfunc 1


//==============================================================================
// Called when switching to command mode to register SPP event handler
//==============================================================================
sub OnSetModeCmd() 
    OnEvent  EVBTC_SPP_DATA_RECEIVED call HandlerSppDataCmd
endsub


//==============================================================================
// Called when switching to SPP mode to register SPP event handler
//==============================================================================
sub OnSetModeSpp() 
    OnEvent  EVBTC_SPP_DATA_RECEIVED call HandlerSppData
endsub

'//******************************************************************************
'// Equivalent to main() in C
'//******************************************************************************
OnEvent  EVINQRESP                call HandlerInqResp
OnEvent  EVBTC_INQUIRY_TIMEOUT    call HandlerBtcInqTimOut
OnEvent  EVBTC_DISCOV_TIMEOUT     call HandlerBtcDiscTimOut  

OnEvent  EVBTC_PAIR_REQUEST       call HandlerPairReq
OnEvent  EVBTC_PIN_REQUEST        call HandlerPinReq
OnEvent  EVBTC_PAIR_RESULT        call HandlerPairRes

OnEvent  EVSPPCONN                call HandlerSppCon
OnEvent  EVBTC_SPP_CONN_TIMEOUT   call HandlerSppConnTimOut
OnEvent  EVSPPDISCON              call HandlerSppDiscon
OnEvent  EVBTC_SPP_DATA_RECEIVED  call HandlerSppDataCmd