'//******************************************************************************
'// Laird Technologies (c) 2014
'//
'// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'// +++++                                                                      ++
'// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
'// +++++  which consists of all characters up to the first . and excluding it ++
'// +++++                                                                      ++
'// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'//
'// Real Time Clock Client sample application. Allows control of a BT900 RTC
'// server from a BT900 or BL620 device
'//
'// 21/10/2014
'//
'//******************************************************************************

 // Commands:
 //
 // show time                       : Shows the time
 // show alarm time                 : Shows the alarm time
 // show alarm mode                 : Shows what mode the alarm is in
 // show version                    : Shows the version of the BT900 host device
 // show addr                       : Shows the target Bluetooth address
 // scan                            : Listens for RTC packets from devices
 // set time <timestamp>            : Sets the RTC time
 // set alarm time <timestamp>      : Sets the alarm time
 // set alarm mode <on/off> <match> : Sets the alarm mode
 // set addr <btaddr>               : Changes the target Bluetooth address to connect to
 // connect                         : Connects to the host BT900
 // disconnect                      : Disconnects from the BT900
 // help                            : Shows list of commands
 // timestamp                       : Shows format of timestamp
 // version                         : Shows the version
 // quit/exit                       : Exits the application
 // 

 //Defines for the DoFunc variable
 #define READ_TIME 0
 #define READ_VERSION 1
 #define READ_ALARMTIME 2
 #define READ_ALARMMODE 3
 #define WRITE_ALARMTIME 4
 #define WRITE_ALARMMODE 5
 #define WRITE_TIME 6
 
 dim rc //Function return code
 dim TargetBT$ : TargetBT$ = "\00\00\16\a4\09\3a\99" //Bluetooth address` of the device to connect too
 dim Status : Status = 0 //0 = waiting for user input, 1 = scanning, 2 = ?, 3 = ?, 4 = ?
 dim ConnectionStatus : ConnectionStatus = 0 //0 = disconnected, 1 = connected
 dim nCtxG //Global BLE handler
 dim APP_VERSION$ : APP_VERSION$ = "0.9" //Version of client program
 dim TmpStr$ : TmpStr$ = "" //Temporary string for inter-function passing
 
 //List of UUID's
 dim TimeUUID : TimeUUID = 0
 dim VersionUUID : VersionUUID = 0
 dim AlarmTimeUUID : AlarmTimeUUID = 0
 dim AlarmModeUUID : AlarmModeUUID = 0
 dim UpdateTimeUUID : UpdateTimeUUID = 0
 
 //List of service handle IDs
 dim TimeHID : TimeHID = 0x2A2B
 dim VersionHID : VersionHID = 0x2B04
 dim AlarmTimeHID : AlarmTimeHID = 0x2B03
 dim AlarmModeHID : AlarmModeHID = 0x2B02
 dim UpdateTimeHID: UpdateTimeHID = 0x2B00
 
 dim DoFunc : DoFunc = 0 //Temporary variable for what function to perform when characteristic is found

 //Global variables for timestamps
 dim TS_HH, TS_MM1, TS_SS, TS_DD, TS_MM2, TS_YYYY
 
 //Global variables for UART
 dim nMatch, stRsp$, urtcmd$, tkn$

FUNCTION HndlrCnTOut()
        //Runs on connection timeout
        PRINT "Error: Connection attempt timed out."
ENDFUNC 1

FUNCTION HndlrBleMsg(nMsgId, nCtx)
        //Runs on BLE message
        IF nMsgId == 0 THEN
                //Connected!
                PRINT "Connected!\n"
                nCtxG = nCtx
                ConnectionStatus = 1
        ELSEIF nMsgId == 1 THEN
                //Disconnected
                ConnectionStatus = 0
                PRINT "Disconnected!\n"

                //Reset all handler UUIDs back to default (unset)
                TimeUUID = 0
                VersionUUID = 0
                AlarmTimeUUID = 0
                AlarmModeUUID = 0
                UpdateTimeUUID = 0
        ENDIF
ENDFUNC 1

FUNCTION ValidateTimestamp()
        //Returns 0 if the timestamp provided is invalid
        IF (TS_HH >= 0 && TS_HH < 24 && TS_MM1 >= 0 && TS_MM1 < 60 && TS_SS >= 0 && TS_SS < 60 && TS_DD > 0 && TS_DD < 32 && TS_MM2 > 0 && TS_MM2 < 13 && TS_YYYY > 2000 && TS_YYYY < 2399) THEN
                //Valid!
        ELSE
                //Invalid
                EXITFUNC 0
        ENDIF
ENDFUNC 1

FUNCTION SplitTimestamp(TS$)
        //Splits up a timestamp into the individual parts and stores them in global variables
        dim Tmp$
        Tmp$ = MID$(TS$, 0, 2)
        TS_HH = StrValDec(Tmp$)
        Tmp$ = MID$(TS$, 3, 2)
        TS_MM1 = StrValDec(Tmp$)
        Tmp$ = MID$(TS$, 6, 2)
        TS_SS = StrValDec(Tmp$)
        Tmp$ = MID$(TS$, 9, 2)
        TS_DD = StrValDec(Tmp$)
        Tmp$ = MID$(TS$, 12, 2)
        TS_MM2 = StrValDec(Tmp$)
        Tmp$ = MID$(TS$, 15, 4)
        TS_YYYY = StrValDec(Tmp$)
ENDFUNC 1

 FUNCTION EnableScan()
        //Scan infinitely with no filtering
        Status = 1
        rc = BleScanStart(0, 0)

        IF rc==0 THEN
                PRINT "Scanning (Press enter to stop)\n"
        ELSE
                PRINT "Error: "; INTEGER.H'rc;"\n"
        ENDIF
 ENDFUNC 1

 FUNCTION HndlrScanTO()
         //Runs when scanning times out
     PRINT "Scan timeout\n"
         Status = 0
 ENDFUNC 1

 '//This handler will be called when an advert is received
 FUNCTION HndlrAdvRpt()
     DIM periphAddr$, advData$, nDiscarded, nRssi
     '//Read all cached advert reports
     DO
        rc=BleScanGetAdvReport(periphAddr$, advData$, nDiscarded, nRssi)
//                IF strcmp(TargetBT$, periphAddr$) == 0 THEN
                        //Decode time and date data
                        dim adval$
                        dim Tmp
                        rc=BLEGETADBYTAG(advData$, 0x16, ADval$)
IF (strlen(ADval$) == 10) THEN
                        PRINT "From: "; StrHexize$(periphAddr$);" (RSSI: ";nRssi;")\n"
                        PRINT "Date & Time: "
                        rc=BleDecodeU8(ADVal$,Tmp,5)
                        PRINT Tmp;":"
                        rc=BleDecodeU8(ADVal$,Tmp,4)
                        PRINT Tmp;":"
                        rc=BleDecodeU8(ADVal$,Tmp,3)
                        PRINT Tmp;" on "
                        rc=BleDecodeU8(ADVal$,Tmp,6)
                        PRINT Tmp;"/"
                        rc=BleDecodeU8(ADVal$,Tmp,7)
                        PRINT Tmp;"/"
                        rc=BleDecodeU16(ADVal$,Tmp,8)
                        PRINT Tmp;"\n"
ENDIF
//                ENDIF
         UNTIL rc!=0
 ENDFUNC 1
 
 FUNCTION DoConnect()
        //Makes a connection to the host device
        IF ConnectionStatus == 0 THEN
                //Not connected
                rc = BleConnect(TargetBT$, 5000, 10000, 40000, 5000000)
        ELSE
                PRINT "Error: Already connected to target device.\n"
        ENDIF
 ENDFUNC 1
 
 FUNCTION DoDisconnect()
        //Disconnects from the host device
        IF ConnectionStatus == 1 THEN
                rc = BleDisconnect(nCtxG)
        ELSE
                PRINT "Error: Not connected to a device.\n"
        ENDIF
 ENDFUNC 1
 
 FUNCTION IsConnected()
        //Returns a message if not connected to the device
        IF ConnectionStatus == 0 THEN
                PRINT "Error: you must be connected to the target BT900 to use this function.\n"
                EXITFUNC 2
        ENDIF
 ENDFUNC 1

FUNCTION OnUartCmd()
dim tlen, tkn$, Buf$
    rc=-2 //assume there is no error
    tlen = ExtractStrToken(urtcmd$,tkn$) //get first token
    IF tlen > 0 THEN
        IF strcmp(tkn$, "show")==0 THEN
                                tlen = ExtractStrToken(urtcmd$,tkn$) //get next token
                                IF strcmp(tkn$, "addr")==0 THEN
                                        //Show target Bluetooth address
                                        PRINT "\nTarget Bluetooth address: ";STRHEXIZE$(TargetBT$)
                                        EXITFUNC 1
                                ENDIF
                        IF IsConnected() == 1 THEN
                                IF strcmp(tkn$, "time")==0 THEN
                                        //Show remote BT900 time
                                        IF (TimeUUID > 0) THEN
                                                rc = BleGattcRead(nCtxG, TimeUUID, 0)
                                        ELSE
                                                DoFunc = READ_TIME
                                                rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(TimeHID), 0)
                                        ENDIF
                                ELSEIF strcmp(tkn$, "version")==0 THEN
                                        //Show remote BT900 version
                                        IF (VersionUUID > 0) THEN
                                                rc = BleGattcRead(nCtxG, VersionUUID, 0)
                                        ELSE
                                                DoFunc = READ_VERSION
                                                rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(VersionHID), 0)
                                        ENDIF
                                ELSEIF strcmp(tkn$, "alarm")==0 THEN
                                        tlen = ExtractStrToken(urtcmd$,tkn$)
                                        IF strcmp(tkn$, "time")==0 THEN
                                                //Show remote BT900 alarm time
                                                IF (AlarmTimeUUID > 0) THEN
                                                        rc = BleGattcRead(nCtxG, AlarmTimeUUID, 0)
                                                ELSE
                                                        DoFunc = READ_ALARMTIME
                                                        rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(AlarmTimeHID), 0)
                                                ENDIF
                                        ELSEIF strcmp(tkn$, "mode")==0 THEN
                                                //Show remote BT900 alarm mode
                                                IF (AlarmModeUUID > 0) THEN
                                                        rc = BleGattcRead(nCtxG, AlarmModeUUID, 0)
                                                ELSE
                                                        DoFunc = READ_ALARMMODE
                                                        rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(AlarmModeHID), 0)
                                                ENDIF
                                        ENDIF
                                ENDIF
                        ENDIF
'            rc = _at()
        ELSEIF strcmp(tkn$, "set")==0 THEN
                        tlen = ExtractStrToken(urtcmd$,tkn$) //get next token
                        IF strcmp(tkn$, "addr")==0 THEN
                                //Change BT address to connect to
                                tlen = ExtractStrToken(urtcmd$,tkn$) //get next token
                                IF (strlen(tkn$) == 14) THEN
                                        //Update BT addr
                                        TargetBT$ = STRDEHEXIZE$(tkn$)
                                        PRINT "\nTarget Bluetooth address updated to ";tkn$
                                ELSE
                                        //Invalid address
                                        PRINT "\nInvalid Bluetooth address provided."
                                ENDIF
                                urtcmd$ = ""
                                EXITFUNC 1
                        ENDIF

                        IF IsConnected() == 1 THEN
                                IF strcmp(tkn$, "time")==0 THEN
                                        //Update time on server
                                        tkn$ = mid$(urtcmd$, 1, strlen(urtcmd$)-2)
                                        IF STRLEN(tkn$) == 19 THEN
                                                rc = SplitTimestamp(tkn$)
                                                IF ValidateTimestamp() == 1 THEN
                                                        //Valid timestamp
                                                        IF (UpdateTimeUUID > 0) THEN
                                                                rc = BleEncode8(Buf$, TS_SS, 0)
                                                                rc = BleEncode8(Buf$, TS_MM1, 1)
                                                                rc = BleEncode8(Buf$, TS_HH, 2)
                                                                rc = BleEncode8(Buf$, TS_DD, 3)
                                                                rc = BleEncode8(Buf$, TS_MM2, 4)
                                                                rc = BleEncode16(Buf$, TS_YYYY, 5)
                                                                rc = BleGATTCWrite(nCtxG, UpdateTimeUUID, Buf$)
                                                        ELSE
                                                                DoFunc = WRITE_TIME
                                                                rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(UpdateTimeHID), 0)
                                                        ENDIF
                                                ELSE
                                                        //Invalid timestamp
                                                        PRINT "Error: Provided timestamp is not valid\n"
                                                ENDIF
                                        ELSE
                                                //Invalid length
                                                PRINT "Error: Provided timestamp is not valid\n"
                                        ENDIF
                                ELSEIF strcmp(tkn$, "alarm")==0 THEN
                                        tlen = ExtractStrToken(urtcmd$,tkn$) //get next token
                                        IF strcmp(tkn$, "time")==0 THEN
                                                //Update alarm on server
                                                tkn$ = mid$(urtcmd$, 1, strlen(urtcmd$)-2)
                                                IF STRLEN(tkn$) == 19 THEN
                                                        rc = SplitTimestamp(tkn$)
                                                        IF ValidateTimestamp() == 1 THEN
                                                                IF (AlarmTimeUUID > 0) THEN
                                                                        //Valid timestamp
                                                                        rc = BleEncode8(Buf$, TS_SS, 0)
                                                                        rc = BleEncode8(Buf$, TS_MM1, 1)
                                                                        rc = BleEncode8(Buf$, TS_HH, 2)
                                                                        rc = BleEncode8(Buf$, TS_DD, 3)
                                                                        rc = BleEncode8(Buf$, TS_MM2, 4)
                                                                        rc = BleGATTCWrite(nCtxG, AlarmTimeUUID, Buf$)
                                                                        PRINT "Setting alarm time to ";TS_HH;":";TS_MM1;":";TS_SS;" ";TS_DD;"/";TS_MM2;"...\n"
                                                                ELSE
                                                                        DoFunc = WRITE_ALARMTIME
                                                                        rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(AlarmTimeHID), 0)
                                                                ENDIF
                                                        ELSE
                                                                //Invalid timestamp
                                                                PRINT "Error: Provided timestamp is not valid\n"
                                                        ENDIF
                                                ELSE
                                                        //Invalid length
                                                        PRINT "Error: Provided timestamp is not valid\n"
                                                ENDIF
                                        ELSEIF strcmp(tkn$, "mode")==0 THEN
                                                //Set alarm mode and if enabled
                                                tlen = ExtractStrToken(urtcmd$,tkn$) //get next token
                                                IF strcmp(tkn$, "on")==0 THEN
                                                        //Enable
                                                        tlen = ExtractStrToken(urtcmd$,tkn$) //get next token
                                                        rc = BleEncode8(Buf$, 1, 0)
                                                        DoFunc = WRITE_ALARMMODE
                                                        IF strcmp(tkn$, "seconds")==0 THEN
                                                                //Seconds
                                                                rc = BleEncode8(Buf$, 0, 1)
                                                                TmpStr$ = Buf$
                                                                IF (AlarmModeUUID > 0) THEN
                                                                        rc = BleGATTCWrite(nCtxG, AlarmModeUUID, Buf$)
                                                                ELSE
                                                                        rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(AlarmModeHID), 0)
                                                                ENDIF
                                                                PRINT "Enabled alarm to match on seconds\n"
                                                        ELSEIF strcmp(tkn$, "minutes")==0 THEN
                                                                //Minutes
                                                                rc = BleEncode8(Buf$, 1, 1)
                                                                TmpStr$ = Buf$
                                                                IF (AlarmModeUUID > 0) THEN
                                                                        rc = BleGATTCWrite(nCtxG, AlarmModeUUID, Buf$)
                                                                ELSE
                                                                        rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(AlarmModeHID), 0)
                                                                ENDIF
                                                                PRINT "Enabled alarm to match on minutes\n"
                                                        ELSEIF strcmp(tkn$, "hours")==0 THEN
                                                                //Hours
                                                                rc = BleEncode8(Buf$, 2, 1)
                                                                TmpStr$ = Buf$
                                                                IF (AlarmModeUUID > 0) THEN
                                                                        rc = BleGATTCWrite(nCtxG, AlarmModeUUID, Buf$)
                                                                ELSE
                                                                        rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(AlarmModeHID), 0)
                                                                ENDIF
                                                                PRINT "Enabled alarm to match on hours\n"
                                                        ELSEIF strcmp(tkn$, "date")==0 THEN
                                                                //Date
                                                                rc = BleEncode8(Buf$, 4, 1)
                                                                TmpStr$ = Buf$
                                                                IF (AlarmModeUUID > 0) THEN
                                                                        rc = BleGATTCWrite(nCtxG, AlarmModeUUID, Buf$)
                                                                ELSE
                                                                        rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(AlarmModeHID), 0)
                                                                ENDIF
                                                                PRINT "Enabled alarm to match on date\n"
                                                        ELSE
                                                                //Invalid
                                                                PRINT "Error: Invalid mode.\n"
                                                        ENDIF
                                                ELSEIF strcmp(tkn$, "off")==0 THEN
                                                        //Disable
                                                        rc = BleEncode8(Buf$, 0, 0)
                                                        rc = BleEncode8(Buf$, 0, 1)
                                                        TmpStr$ = Buf$
                                                        IF (AlarmModeUUID > 0) THEN
                                                                rc = BleGATTCWrite(nCtxG, AlarmModeUUID, Buf$)
                                                        ELSE
                                                                DoFunc = WRITE_ALARMMODE
                                                                rc = BleGattCFindChar(nCtxG, BleHandleUuid16(0x1805), 0, BleHandleUuid16(AlarmModeHID), 0)
                                                        ENDIF
                                                        PRINT "Disabled alarm\n"
                                                ELSE
                                                        //Invalid
                                                        PRINT "Error: Invalid mode.\n"
                                                ENDIF
                                        ENDIF
                                ENDIF
                        ENDIF
        ELSEIF strcmp(tkn$, "scan")==0 THEN
            rc = EnableScan()
        ELSEIF strcmp(tkn$, "connect")==0 THEN
                        rc = DoConnect()
        ELSEIF strcmp(tkn$, "disconnect")==0 THEN
            rc = DoDisconnect()
        ELSEIF StrCmp(tkn$, "help")==0 THEN
'todo
        ELSEIF StrCmp(tkn$, "timestamp")==0 THEN
                        PRINT "Timestamp format is: HH:MM:SS DD/MM/YYYY\n"
        ELSEIF strcmp(tkn$, "version")==0 THEN
                        PRINT "Version ";APP_VERSION$;"\n"
        ELSEIF strcmp(tkn$, "quit")==0 || strcmp(tkn$, "exit")==0 THEN
                        IF ConnectionStatus == 1 THEN
                                rc = DoDisconnect()
                        ENDIF
            EXITFUNC 0
                ELSE
                        PRINT "Error: '";tkn$;LEFT$(urtcmd$, STRLEN(urtcmd$)-1);"' is not a valid command\n"
        ENDIF
    ENDIF
        //Clear UART RX buffer
        urtcmd$ = ""
ENDFUNC 1
 
FUNCTION HndlrUartRx()
        IF Status == 1 THEN
                //End scanning
                rc = BleScanStop()
                Status = 0
                PRINT "Ended scanning.\n"
        ELSE
                //check if CR has been received
                nMatch=UartReadMatch(stRsp$,13)
                if nMatch!=0 then
                        //CR exists in the input buffer
                        urtcmd$ = strsplitleft$(stRsp$,nMatch)
                        EXITFUNC OnUartCmd()
                ENDIF
        ENDIF
ENDFUNC 1
        
FUNCTION HndlrGCData(nCtx, nHndl, nStat)
        //Runs when data has been read from remote GATT server
        dim offset, attrData$, Tmp
        IF nStat == 0 THEN
                rc = BleGATTCReadData(nCtx, nHndl, offset, attrData$)
                IF nHndl == TimeUUID THEN
                        //We have the time & date data
                        PRINT "Date & Time: "
                        rc=BleDecodeU8(attrData$,Tmp,5)
                        PRINT Tmp;":"
                        rc=BleDecodeU8(attrData$,Tmp,4)
                        PRINT Tmp;":"
                        rc=BleDecodeU8(attrData$,Tmp,3)
                        PRINT Tmp;" on "
                        rc=BleDecodeU8(attrData$,Tmp,6)
                        PRINT Tmp;"/"
                        rc=BleDecodeU8(attrData$,Tmp,7)
                        PRINT Tmp;"/"
                        rc=BleDecodeU16(attrData$,Tmp,8)
                        PRINT Tmp;"\n"
                ELSEIF nHndl == AlarmTimeUUID THEN
                        //We have the alarm data
                        PRINT "Alarm: "
                        rc=BleDecodeU8(attrData$,Tmp,2)
                        PRINT Tmp;":"
                        rc=BleDecodeU8(attrData$,Tmp,1)
                        PRINT Tmp;":"
                        rc=BleDecodeU8(attrData$,Tmp,0)
                        PRINT Tmp;" on "
                        rc=BleDecodeU8(attrData$,Tmp,3)
                        PRINT Tmp;"/"
                        rc=BleDecodeU8(attrData$,Tmp,4)
                        PRINT Tmp;"\n"
                ELSEIF nHndl == VersionUUID THEN
                        //Version reply
                        PRINT "Remote RTC Server Version: ";attrData$;"\n"
                ELSEIF nHndl == AlarmModeUUID THEN
                        //Alarm mode reply
                        dim TmpStr$
                        PRINT "Alarm is "
                        TmpStr$ = LEFT$(attrData$, 1)
                        IF strcmp(TmpStr$, "\01") == 0 THEN
                                //Alarm enabled
                                PRINT "ENABLED"
                        ELSE
                                //Alarm disabled
                                PRINT "DISABLED"
                        ENDIF
                        PRINT ". Matching on "
                        TmpStr$ = RIGHT$(attrData$, 1)
                        IF strcmp(TmpStr$, "\00") == 0 THEN
                                //000 = Seconds match
                                PRINT "Seconds"
                        ELSEIF strcmp(TmpStr$, "\01") == 0 THEN
                                //001 = Minutes match
                                PRINT "Minutes"
                        ELSEIF strcmp(TmpStr$, "\02") == 0 THEN
                                //010 = Hours match
                                PRINT "Hours"
                        ELSEIF strcmp(TmpStr$, "\04") == 0 THEN
                                //100 = Date match
                                PRINT "Date"
                        ELSE
                                //Invalid
                                PRINT "<invalid>"
                        ENDIF
                        PRINT "\n"
                ENDIF
        ELSE
                PRINT "Error: Data reading from remote GATT server failed (Code: ";nStat;")\n"
        ENDIF
        ENDFUNC 1

FUNCTION HndlrFindCh(nCtx, cP, hCv, sH)
        //Runs when a characteristic has been discovered
        dim Buf$ : Buf$ = ""
        IF (DoFunc == READ_TIME) THEN
                TimeUUID = hCv
                rc = BleGattcRead(nCtxG, hCv, 0)
        ELSEIF (DoFunc == READ_VERSION) THEN
                VersionUUID = hCv
                rc = BleGattcRead(nCtxG, hCv, 0)
        ELSEIF (DoFunc == READ_ALARMTIME) THEN
                AlarmTimeUUID = hCv
                rc = BleGattcRead(nCtxG, hCv, 0)
        ELSEIF (DoFunc == READ_ALARMMODE) THEN
                AlarmModeUUID = hCv
                rc = BleGattcRead(nCtxG, hCv, 0)
        ELSEIF (DoFunc == WRITE_ALARMTIME) THEN
                AlarmTimeUUID = hCv
                rc = BleEncode8(Buf$, TS_SS, 0)
                rc = BleEncode8(Buf$, TS_MM1, 1)
                rc = BleEncode8(Buf$, TS_HH, 2)
                rc = BleEncode8(Buf$, TS_DD, 3)
                rc = BleEncode8(Buf$, TS_MM2, 4)
                rc = BleGATTCWrite(nCtxG, AlarmTimeUUID, Buf$)
        ELSEIF (DoFunc == WRITE_ALARMMODE) THEN
                AlarmModeUUID = hCv
                rc = BleGATTCWrite(nCtxG, AlarmModeUUID, TmpStr$)
        ELSEIF (DoFunc == WRITE_TIME) THEN
                UpdateTimeUUID = hCv
                rc = BleEncode8(Buf$, TS_SS, 0)
                rc = BleEncode8(Buf$, TS_MM1, 1)
                rc = BleEncode8(Buf$, TS_HH, 2)
                rc = BleEncode8(Buf$, TS_DD, 3)
                rc = BleEncode8(Buf$, TS_MM2, 4)
                rc = BleEncode16(Buf$, TS_YYYY, 5)
                rc = BleGATTCWrite(nCtxG, hCv, Buf$)
        ENDIF
ENDFUNC 1

FUNCTION HndlrWrtnCh(nCtx, hCv, nStat)
        //Runs when a charteristic was written
        IF (hCv == AlarmTimeUUID) THEN
                PRINT "Alarm Time"
        ELSEIF (hCv == AlarmModeUUID) THEN
                PRINT "Alarm Mode"
        ELSEIF (hCv == UpdateTimeUUID) THEN
                PRINT "Time"
        ENDIF

        IF (nStat == 0) THEN
                //Written successfully
                PRINT " Updated successfully!"
        ELSE
                //Error
                PRINT " was not updated, error code: ";INTEGER.H'nStat
        ENDIF
        PRINT "\n"
ENDFUNC 1

//Open GATT Client
rc = BleGattcOpen(0,0)
PRINT "RTC Client ready!\n"

//Events 
ONEVENT EVUARTRX               CALL HndlrUartRx //Runs when UART gets data
ONEVENT EVBLE_SCAN_TIMEOUT     CALL HndlrScanTO //Runs when BLE scan times out
ONEVENT EVBLE_ADV_REPORT       CALL HndlrAdvRpt //Runs when a BLE scan report is ready
ONEVENT EVBLE_CONN_TIMEOUT     CALL HndlrCnTOut //Runs on connection timeout
ONEVENT EVBLEMSG               CALL HndlrBleMsg //Runs on BLE message
ONEVENT EVATTRREAD             CALL HndlrGCData //Runs on GATT Client data ready for reading
ONEVENT EVFINDCHAR             CALL HndlrFindCh //Runs on characteristic found
ONEVENT EVATTRWRITE            CALL HndlrWrtnCh //Runs on characteristic written

WAITEVENT
