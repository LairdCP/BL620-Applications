//******************************************************************************
// Laird Technologies (c) 2014
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// This application allows you to make a connection to a smartBASIC module that is
// advertising with the Laird VSP service. It then bridges the UART to the BLE connection
// so that any data sent from UwTerminal is sent over the BLE connection via the VSP 
// service to the other module.
//
// This app provides for a command interface over the uart and the protocol is
// as follows:-
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Convention : (1) Case sensitive, and commands are presented in alphabetic order
//              (2) If line ends with \ then it continues on next line. That does
//                  not mean that it should be sent as multiple lines
//              (3) Replace anything between ## 
//              (4) #INTaaaa# means a number in decimal, hex, octal or binary
//                      format -> 23 == 0x17 == h'17 == o'23 == b'10111
//                      aaaa is just a description
//              (5) #HEXaaaa# means a string without delimitors consisting of hex 
//                      characters only aaaa is just a description
//              (6) #STRaaaa# means a string without delimitors
//                      aaaa is just a description
//              (7) "STRaaaa" means a string which must have the " delimitor
//                      aaaa is just a description
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// -----------------------------------------------------------------------------
// at+bls OR scan
//    - scan for BLE devices. Returns BT address, RSSI and complete local name.
//
//    -> if CACHE_MAC_ADDRESSES is 1, each device found is stored in a table
//       so that adverts for that device are stored only once. The max number of 
//       devices allowed in that table is configurable via #define
//       MAX_DEV_SCAN_TABLE.
//
// -----------------------------------------------------------------------------
// atd #HEXbdAddr7bytes# OR
// connect #HEXbdAddr7bytes# OR
//    - connect to device with given BT address
//
//    -> if an invalid or null BT address is given, the default mac address 
//      (see #define PERIPH_MAC_ADDR) will be used.
//
//    -> Upon successful connection the remote GATT table is searched for the rx
//       and tx characteristic, and the CCCD of the tx characteristic. When these 
//       are found, the application enters bridge mode. Any data 
//       arriving at the UART is sent over the BLE connection.
//
// -----------------------------------------------------------------------------
// ^^^
//    - exit from bridge mode to command mode to accept the commands in this list.
//    -> Note: Ensure Line Mode is disabled in UwTerminal
//
// -----------------------------------------------------------------------------
// ato OR bridge
//    - enter bridge mode. Any data arriving at the UART is sent over the BLE 
//      connection.
//
// -----------------------------------------------------------------------------
// ath OR disconnect
//    - disconnect from peer device.
//
// -----------------------------------------------------------------------------
// bdaddr
//    - Prints the module's 7 byte BT address
//
// -----------------------------------------------------------------------------
// stop
//    - Stop scanning or connecting, whichever is being done
//   
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// misc i  clearall
//    - make all elements of the entire i[] array equal to 0
//
// -----------------------------------------------------------------------------
// misc i  set #INTidx# #INTval#
//    - i[#INTidx#] = #INTval#
//    - #INTidx# will be checked for valid index 
//
// -----------------------------------------------------------------------------
// misc s$ clearall
//    - make all elements of the entire s$[] array empty
//
// -----------------------------------------------------------------------------
// misc s$ set #INTidx# #STRescapedvalue#
//    - s$[#INTidx#] = #STRescapedvalue#
//    - #INTidx# will be checked for valid index 
//
// -----------------------------------------------------------------------------
// misc s$ sethex #INTidx# #HEXdigitsvalue#
//    - s$[#INTidx#] = #HEXdigitsvalue#
//    - #INTidx# will be checked for valid index 
//
// -----------------------------------------------------------------------------
// quit OR exit
//    - exit to command mode
//
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************

#define APP_VERSION                          "1.0"

        //Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS                  1

        //if set to 1, on startup the module will connect to device PEER_BT_ADDR for VSP
#define CONNECT_ON_STARTUP                   0

        //Set this to the MAC address of the peripheral mode module you want to connect to by default
#define PERIPH_MAC_ADDR                     "01F63627A60BEA"

        // size of i[]
#define NUM_OF_I_PARAMS                     (10)
        // size of s$[] and must be at least 8 elements for BleSvcRegDevInfo()     
#define NUM_OF_S_PARAMS                     (10)


        '// Laird Technologies 128 bit Base UUID
#define LT_BASE_UUID                        "\56\9a\00\00\b8\7f\49\0c\92\cb\11\ba\5e\a5\16\7c\"

        '// LT VSP Service TX char UUID 
#define LT_VSP_TX_UUID                      0x2000
        '// LT VSP Service TX char properties - notify
#define LT_VSP_TX_PROPS                     0x10
        '// LT VSP Service RX char UUID 
#define LT_VSP_RX_UUID                      0x2001
        '// LT VSP Service RX char properties - write, write no response
#define LT_VSP_RX_PROPS                     0x0C

        '//LT VSP Service UUID
#define LT_VSP_SVC_UUID                     0x1101
        '// CCCD UUID
#define CCCD_UUID                           0x2902

        //Set to 1 to cache mac addresses on a scan so you don't see repeated advert reports from same device
        //Otherwise every advert report will be printed
#define CACHE_MAC_ADDRESSES                 1


        //Connection timeout ms
#define CONN_TMT                            10000
        //Min Connection interval us
#define MIN_CONN_INTVL                      7500
        //Max Connection interval us
#define MAX_CONN_INTVL                      40000
        //Link supervision timeout us
#define LINK_SUP_TMT                        3000000
        //Scan timeout (ms)
#define SCAN_TMT                            10000

        //Scan Interval ms
#define SCAN_INTVL                          80
        //Scan Window ms
#define SCAN_WINDOW                         40
        //Scan type (0 = passive, 1 - active)
#define SCAN_TYPE                           1
        //Minimum Reports in Cache  
#define SCAN_MIN_RPTS_IN_CACHE              4



//BLE EVENT MSG IDs
#define BLE_EVBLEMSGID_CONNECT              0 // msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT           1 // msgCtx = connection handle

#define VSP_MAX_CHARDATA_LEN                (20)


//BLE STATUS
#define BLE_CONNECTED_M                     0x10   //connected as master
#define BLE_INITIATING                      0x04   //intiating a connection
#define BLE_SCANNING                        0x08   //scanning for adverts
    

//Misc
#define CAR_PRESS_DELAY                     100 //ms to wait between registering entries of '^'
#define GENERIC_ERR                         1
#define NOCARR_ERR                          2
#define MAX_DEV_SCAN_TABLE                  10  //max number of devices to store in table when scanning



//APP RUN MODES
#define CMD_MODE                            0
#define BRIDGE_VSP_MODE                     1

//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr

//******************************************************************************
// Debugging resource as early as possible
//******************************************************************************

//------------------------------------------------------------------------------
// For debugging
// --- rc = result code
// --- ln = line number         
//------------------------------------------------------------------------------
Sub AssertRC(rc,ln)   
    if rc!=0 then
        print "\nFail :";integer.h' rc;" at tag ";ln
    //else
        //print "\nOk: line ";ln
    endif
EndSub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub DbgMsg(byval msg$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$
  endif
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub DbgMsgVal(byval msg$ as string, byval vl as integer)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$;" ";vl
  endif
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub DbgPrnAdvReport(byref rp$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\nRpt=";strhexize$(rp$)
  endif
endsub

//******************************************************************************
// Library Import
//******************************************************************************

//******************************************************************************
// Debugging resource after libs
//******************************************************************************

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim rc
dim stRsp$ as string        //Uart rx data is stored here

dim ok$,er$,pr$, nc$

dim i[NUM_OF_I_PARAMS]      // index 0 used for return values
dim s$[NUM_OF_S_PARAMS]     // must be at least 8 elements

dim urtcmd$                 //cmd line from uart
dim tkn$,tlen               //used by command parser
dim urts                    //will be <0 if uart parser suspended


dim vdta$                   //data to send over virtual serial port
dim vsplen                  //0 implies can send data. >0 waiting for notify event
dim vspRxH                  //handle of the RX char in the peripheral for VSP
dim vspTxH                  //handle of the TX char in the peripheral for VSP
dim vspCcH                  //handle of the TX CCCD in the peripheral for VSP

dim hC                      //connection handle
dim tb$                     //table for storing discovered MAC addresses - instantiated in _Scan()
dim tbIDs                   //number of items in the table
dim carCnt                  //count variable for number of times '^' entered
dim notf$                   //data to write to Tx CCCD 
dim bseUuid$                //LT Base UUID

dim hBseUUID                //handle of Laird Technologies base UUID
dim hVspTxUUID              //handle of LT VSP Service TX char UUID
dim hVspRxUUID              //handle of LT VSP Service RX char UUID
dim hVspSvcUUID             //handle of LT VSP Service UUID

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************

ok$    = "\nOK"
er$    = "\nERROR "
pr$    = "\r\n>"
nc$      = "\nNO CARRIER"
bseUuid$ = LT_BASE_UUID


hBseUUID = BleHandleUuid128(bseUuid$)
hVspTxUUID = BleHandleUuidSibling(hBseUuid, LT_VSP_TX_UUID)
hVspRxUUID = BleHandleUuidSibling(hBseUuid, LT_VSP_RX_UUID)
hVspSvcUUID = BleHandleUuidSibling(hBseUuid, LT_VSP_SVC_UUID)


//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function ClearS() 
  dim j
  for j = 0 to (NUM_OF_S_PARAMS-1)
    s$[j]=""
  next
endfunc 0

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function ClearI()
  dim j
  for j = 0 to (NUM_OF_I_PARAMS-1)
    i[j]=0
  next
endfunc 0

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub UartRsp(rsp as integer)
    if rsp == 0 then
        print ok$;pr$
    elseif rsp == -2 then
        print pr$
    elseif rsp > 0 then 
        print er$;integer.h' rsp;pr$
    endif
endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function ExtractIntTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractIntToken(u$,i[stIdx])
    if tlen == 0 then
      exitfunc 4
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function ExtractStrTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractStrToken(u$,s$[stIdx])
    if tlen == 0 then
      exitfunc 3
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function ExtractHexTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractStrToken(u$,tkn$)
    if tlen == 0 then
      exitfunc 3
    endif
    s$[stIdx] = StrDehexize$(tkn$)
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0



//-------------------------------------------------------------------------
// Process a carrat character ^ do decide whether or not to switch to command mode
// - When the carCnt value is 3, end func with 1 to switch to command mode
// - Think of it like a boolean value
//-------------------------------------------------------------------------
function SwitchToCmd() 
    '//if ^ was sent after the delay time (valid) increment the counter
    if TimerRunning(0)==0 then
        carCnt = carCnt + 1
        if carCnt<3 then
            TimerStart(0,CAR_PRESS_DELAY,0)                       
        else
            exitfunc 1
        endif
    else 
        //invalid press
        TimerCancel(0)
        carCnt = 0
    endif
endfunc 0  //dont give response to user


//-------------------------------------------------------------------------
// Switch to bridge vsp mode
//-------------------------------------------------------------------------
sub _bridge() 
    notf$ = "\01\00"        //value to write to enable notifications
    rc=BleGattcWrite(hC, vspCcH, notf$)
    AssertRC(rc,263)
endsub


//-------------------------------------------------------------------------
// Scan for devices
//-------------------------------------------------------------------------
function _scan()
    if SysInfo(2016) != BLE_CONNECTED_M then        
        if CACHE_MAC_ADDRESSES == 1 then
            rc=TableInit(tb$)       //table is used to store peer BT addresses
            AssertRC(rc,151)
        endif
        
        //start scanning
        rc=BleScanStart(SCAN_TMT, 0)
        if rc==0 then
            exitfunc -1 //dont give response to user
        endif
    endif
endfunc rc


//-------------------------------------------------------------------------
// Connect to either specified or default device
//-------------------------------------------------------------------------
function _connect() 
    '//only opening gatt client when we need it to save memory
    rc=BleGattcOpen(0,0)
    AssertRC(rc,452)

    dim a$, cParms[4], j
    rc=ExtractStrTokens(urtcmd$,1,1)
    '//use #defined/stored mac address if none given
    if rc!=0 then
        s$[1] = PERIPH_MAC_ADDR
    endif
    
    s$[1] = StrDehexize$(s$[1])

    '//Stop scanning before connecting
    if SysInfo(2016)==8 then
        rc=BleScanStop()     
        tb$=""
    endif
    
    rc=BleConnect(s$[1], CONN_TMT, MIN_CONN_INTVL, MAX_CONN_INTVL, LINK_SUP_TMT)
    if rc!=0 then
        exitfunc rc
    endif  
endfunc -1


//-------------------------------------------------------------------------
// Disconnect
//-------------------------------------------------------------------------
function _disconnect() 
    //if not connected as a master
    if SysInfo(2016)!= 0x10 then
        UartRsp(NOCARR_ERR)  //give NO CARRIER response to user
    else
        rc = BleDisconnect(hC)
        AssertRC(rc,250)
    endif
endfunc -1  //dont give response to user


//------------------------------------------------------------------------------
// #CMD#//  at+bls
//------------------------------------------------------------------------------
Function _at() 
    StrShiftLeft(urtcmd$,1)              //remove the '+'
    tlen = ExtractStrToken(urtcmd$,tkn$) 
    if tlen > 0 then  
    
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        if strcmp(tkn$,"bls")==0 then    
            exitfunc _scan()
        endif
    endif
endfunc -2  //just print '>' if incorrect command


//-------------------------------------------------------------------------
// Stop - Scanning or Initiating a connection
//-------------------------------------------------------------------------
function _stop()
    select SysInfo(2016)   
        case BLE_SCANNING
            exitfunc BleScanStop()
        case BLE_INITIATING
            exitfunc BleConnectCancel()
        case else
    endselect
endfunc 0


//------------------------------------------------------------------------------
//#CMD#//  misc i  clearall
//#CMD#//  misc i  set #INTidx# #INTval#
//#CMD#//  misc s$ clearall
//#CMD#//  misc s$ set #INTidx# #STRescapedvalue#
//#CMD#//  misc s$ sethex #INTidx# #HEXdigitsvalue#
//------------------------------------------------------------------------------
function _Misc()  
  tlen = ExtractStrToken(urtcmd$,tkn$)
  if tlen == 0 then
    exitfunc 5
  endif
  //=================================================
  if strcmp(tkn$,"s$")==0 then
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
      exitfunc 5
    endif
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"clearall")==0 then
      exitfunc ClearS()
    endif  
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"set")==0 then
      //extract 1 (#INTidx#) and store starting at i[1]
      rc = ExtractIntTokens(urtcmd$,1,1)
      if rc != 0 then
        exitfunc rc
      endif
      if (i[1] < 0) || (i[1] >= NUM_OF_S_PARAMS) then 
        exitfunc 6
      endif
      //extract 1 (#STRescapedvalue#) and store starting at s$[1]
      rc = ExtractStrTokens(urtcmd$,i[1],1)
      if rc != 0 then
        exitfunc rc
      endif
      StrDeEscape(s$[i[1]])
      exitfunc 0
    endif  
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"sethex")==0 then
      //extract 1 (#INTidx#) and store starting at i[1]
      rc = ExtractIntTokens(urtcmd$,1,1)
      if rc != 0 then
        exitfunc rc
      endif
      if (i[1] < 0) || (i[1] >= NUM_OF_S_PARAMS) then 
        exitfunc 6
      endif
      //extract 1 (#STRescapedvalue#) and store starting at s$[1]
      rc = ExtractStrTokens(urtcmd$,i[1],1)
      if rc != 0 then
        exitfunc rc
      endif
      StrDeEscape(s$[i[1]])
      exitfunc 0
    endif  
  endif
  //=================================================
  if strcmp(tkn$,"i")==0 then
    tlen = ExtractStrToken(urtcmd$,tkn$)
    if tlen == 0 then
      exitfunc 5
    endif
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"clearall")==0 then
      exitfunc ClearI()
    endif  
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if strcmp(tkn$,"set")==0 then
      dim idx
      tlen = ExtractIntToken(urtcmd$,idx)
      if tlen == 0 then
        exitfunc 5
      endif
      if (idx < 0) || (idx >= NUM_OF_I_PARAMS) then 
        exitfunc 6
      endif
      tlen = ExtractIntToken(urtcmd$,i[idx])
      if tlen == 0 then
        exitfunc 5
      endif
      exitfunc 0
    endif  
  endif
endfunc 5


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function OnUartCmd() as integer
    rc=-2 //assume there is no error
    tlen = ExtractStrToken(urtcmd$,tkn$) //get first token
    if tlen > 0 then  
    
        if strcmp(tkn$,"at")==0 then    
            rc = _at()
            
        elseif strcmp(tkn$,"atd")==0 || strcmp(tkn$,"connect")==0 then    
            rc = _connect()
            
        elseif StrCmp(tkn$,"ato")==0 || StrCmp(tkn$,"bridge")==0 then
            _bridge()
            rc=-1       //don't give response to user
            
        elseif StrCmp(tkn$,"ath")==0 || StrCmp(tkn$,"disconnect")==0  then
            rc = _disconnect()
    
        elseif strcmp(tkn$,"misc")==0 then
            rc = _misc()
            
        elseif strcmp(tkn$,"stop")==0 then
            rc=_stop()
    
        elseif strcmp(tkn$,"quit")==0 || strcmp(tkn$,"exit")==0 then
            '//Stop all radio activity
            rc=BleDisconnect(hC)
            rc=BleScanStop()
            rc=BleConnectCancel()
            print "\nVersion ";APP_VERSION
            exitfunc 0
            
        elseif strcmp(tkn$,"bdaddr")==0 then
            s$[1] = SysInfo$(4)
            print "\n";StrHexize$(s$[1])
    
        endif
    endif
    // send a response back to the user
    UartRsp(rc)
endfunc 1

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
sub Initialise()   
    '//Set configuration for subsequent scans  
    rc=BleScanConfig(0, SCAN_INTVL)
    rc=BleScanConfig(1, SCAN_WINDOW)
    rc=BleScanConfig(2, SCAN_TYPE)
    rc=BleScanConfig(3, SCAN_MIN_RPTS_IN_CACHE)
    
    //print device name
    print "\n\r";BleGetDeviceName$();"\n\r"
    
    if CONNECT_ON_STARTUP == 1 then
        rc=_connect()
        if rc==-1 then
            print "\nConnecting: ";StrHexize$(s$[1]);"\n"
        endif
    else
        //Send user prompt for uart based command interface
        UartRsp(0)
    endif
endsub



//******************************************************************************
// Handler definitions
//******************************************************************************

//------------------------------------------------------------------------------
// This handler is called when data has arrived at the serial port
//------------------------------------------------------------------------------
function HandlerUartRx() as integer
    dim nMatch
    //check if CR has been received
    nMatch=UartReadMatch(stRsp$,13)
    if nMatch!=0 then
        //CR exists in the input buffer
        urtcmd$ = strsplitleft$(stRsp$,nMatch)
        exitfunc OnUartCmd()
    endif
endfunc 1


//------------------------------------------------------------------------------
// This handler is called when data has arrived at the serial port (transparent)
//------------------------------------------------------------------------------
function HandlerUartRxVsp() as integer
    if vsplen==0 then
        vsplen  = UartReadN(vdta$, VSP_MAX_CHARDATA_LEN ) 
        //print vdta$
        if vsplen > 0 then
            //process '^' if sent
            if StrCmp(vdta$,"^")==0 then
                vsplen=0
                vdta$=""
                
                '//parse the ^ entry
                if SwitchToCmd() == 1 then
                    print "\n"
                    rc=SendMsgApp(0,CMD_MODE)
                endif
            
            else
                //can send to the VSP service in the peripheral
                rc=BleGattcWriteCmd(hC,vspRxH,vdta$)
                vdta$=""
            endif
        endif
    endif
endfunc 1


//------------------------------------------------------------------------------
// This handler is called when there is an advert report waiting to be read
//------------------------------------------------------------------------------
function HandlerAdvRpt() as integer
    dim ad$,dta$,ndisc,rsi,nme$
    
    while BleScanGetAdvReport(ad$,dta$,ndisc,rsi)==0

        if CACHE_MAC_ADDRESSES == 1 then   
            '//add device to table if not in there
            if TableLookup(tb$,ad$)<0 then
                rc=TableAdd(tb$, ad$, tbIDs)
                tbIDs = tbIDs + 1
            else
                break
            endif
        endif
                
        '//get and print name of device
        rc=BleGetADByTag(dta$,0x09,nme$)
        print "\nAddress: "; StrHexize$(ad$), rsi, nme$
                
        '// if there are MAX_DEV_SCAN_TABLE mac addresses in the table
        if tbIDs == MAX_DEV_SCAN_TABLE then
            rc=BleScanStop()
            tb$=""
            UartRsp(0)
            print "\n";pr$
            break       
        endif
        
    endwhile   
endfunc 1


//------------------------------------------------------------------------------
// This handler is called when there is a BLE message
//------------------------------------------------------------------------------
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer
    hC = nCtx
  
    select nMsgId  
        case BLE_EVBLEMSGID_CONNECT
            print "\n\nCONNECT"
            
            // get handle of the rx characteristic
            rc=BleGattcFindChar(hC, hVspSvcUUID , 0, hVspRxUUID, 0)
            AssertRC(rc,659)

        case BLE_EVBLEMSGID_DISCONNECT
            print "\nNO CARRIER";pr$
         
        case else      
    endselect    
endfunc 1


//------------------------------------------------------------------------------
// This handler is called when there is a scan attempt timeout
//------------------------------------------------------------------------------
function HandlerBleScanTO() as integer
    //erase the table where the mac addresses are being stored
    tb$=""
    UartRsp(0)
    
    '//force release heap memory used by scan
    rc=BleScanStart(10,0)
    rc=BleScanStop()
endfunc 1


//------------------------------------------------------------------------------
// This handler is called when there is a connection attempt timeout
//------------------------------------------------------------------------------
function HandlerBleConnTO() as integer

  print"\nConnection attempt stopped via timeout";pr$

endfunc 1


//------------------------------------------------------------------------------
// Called after searching for a specific characteristic
//------------------------------------------------------------------------------
function HandlerFindChar(hConn, chProps, hChar, hIncSvc)
    '//identify which char was found by its properties
    if chProps == LT_VSP_RX_PROPS then
        vspRxH = hChar
        //get handle of the tx characteristic
        rc=BleGattcFindChar(hC, hVspSvcUUID , 0, hVspTxUUID, 0)
        AssertRC(rc,862)
        
    elseif chProps == LT_VSP_TX_PROPS then
        vspTxH = hChar
        //get the handle of the VSP TX char CCCD - will be returned in EvFindDesc handler
        rc=BleGattcFindDesc(hC, hVspSvcUUID , 0, hVspTxUUID, 0, BleHandleUuid16(CCCD_UUID), 0)
        AssertRC(rc,868)
        
    else
        print "\nVSP Service not found. Disconnecting..."
        rc=_Disconnect()
    endif
endfunc 1


//------------------------------------------------------------------------------
// Called after searching for a specific descriptor
//------------------------------------------------------------------------------
function HandlerFindDesc(hConn, hDesc)
    if hDesc!=0 then
        vspCcH=hDesc
        _Bridge()             
    else
        print "\nVSP Service not found. Disconnecting..."
        rc=_Disconnect()
    endif
endfunc 1


//------------------------------------------------------------------------------
// When Attribute Write has been confirmed at GATT level
//------------------------------------------------------------------------------
function HandlerAttrWrite(hConn, hAttr, nSts)      
    if nSts!=0 then
        UartRsp(nSts)
    else
        rc=SendMsgApp(0, StrGetChr(notf$,0))    //either a 1 (vsp mode) or 0 (command mode)
    endif
endfunc 1


//------------------------------------------------------------------------------
// When WriteCmd or a Notify has been sent and baseband confirmed
//------------------------------------------------------------------------------
function HandlerNotifyBuf() as integer
  vsplen=0
endfunc HandlerUartRxVsp()


//------------------------------------------------------------------------------
// Called when notification received
//------------------------------------------------------------------------------
function HandlerAttrNotify() 
    dim hConn,hAttr,att$,dscd
    //print "\nEVATTRNOTIFY(vsp)"
    do
        rc=BleGattcNotifyRead(hConn,hAttr,att$,dscd)
        if rc==0 then
            if vspTxH == hAttr then
                print att$
            else
                print "hConn=";integer.h' hConn;",handle=";hAttr;",Dumped=";dscd
                print ",data=";StrHexize$(att$);")"
            endif
        endif
    dowhile rc==0
endfunc 1


//------------------------------------------------------------------------------
// Called after SendMsgApp is called. Used to switch between command and bridge mode
//------------------------------------------------------------------------------
function SetMode(msgID, cmd) as integer
    if cmd==BRIDGE_VSP_MODE then
        if SysInfo(2016) == BLE_CONNECTED_M then
            OnEvent  EVUARTRX       call HandlerUartRxVsp    
            Onevent  EVNOTIFYBUF    call HandlerNotifyBuf
            OnEvent  EVATTRNOTIFY   call HandlerAttrNotify
            print ok$;"\n"  
        endif
        
    elseif cmd==CMD_MODE then
        OnEvent  EVUARTRX       call HandlerUartRx   
        carCnt=0
        UartRsp(0)
    endif
endfunc 1


//------------------------------------------------------------------------------
// Called after a GATT Client operation timeout
//------------------------------------------------------------------------------
function HandlerGattcTout(hC)
    rc=BleDisconnect(hC)
endfunc 1


//------------------------------------------------------------------------------
// When disconnected
//------------------------------------------------------------------------------
function HandlerDiscon(hConn, nRsn)
    if nRsn!= 0x16 then     //if disconnection wasn't initiated by module
        print "\nNO CARRIER","(";integer.h'nRsn;")";pr$
    endif
    rc=HandlerAttrWrite(0, 0, 0)
    BleGattcClose()
endfunc 1





//******************************************************************************
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVUARTRX            call HandlerUartRx
OnEvent  EVBLE_ADV_REPORT    call HandlerAdvRpt
OnEvent  EVBLEMSG            call HandlerBleMsg
OnEvent  EvDiscon            call HandlerDiscon
OnEvent  EVBLE_SCAN_TIMEOUT  call HandlerBleScanTO
OnEvent  EVBLE_CONN_TIMEOUT  call HandlerBleConnTO
OnEvent  EVFINDCHAR          call HandlerFindChar
OnEvent  EVFINDDESC          call HandlerFindDesc
OnEvent  EvAttrWrite         call HandlerAttrWrite
OnEvent  EvGattcTout         call HandlerGattcTout
OnEvent  EVMSGAPP            call SetMode

//------------------------------------------------------------------------------
// Initialise and then wait for events
//------------------------------------------------------------------------------
Initialise()


//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent

